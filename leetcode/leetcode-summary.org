* Number Combination 
This kind of problem ask you to find a combination of numbers(their indext) which their value meet some criterias.

** [[https://leetcode.com/problems/two-sum/submissions/][Two Sum]]                                                             :easy:
** [[https://leetcode.com/problems/3sum/][3Sum]]                                                              :medium:
- Still to slow

** Summary 
- There is no way to early return in Elixir! (see: [[https://www.headway.io/blog/how-to-return-early-from-elixir][There is no return in Elixir!!!]])
  - To do early return, we need to reconstruct our code to use different function signature.
- Use ~for~ comprehensions is convonient!
  - Avaliable keywords include: reduce, when, unique.

    
* List operations 
** [[https://leetcode.com/problems/add-two-numbers/][02 -- Add Two Numbers]]
#+begin_src elixir
  # Definition for singly-linked list.
  #
  # defmodule ListNode do
  #   @type t :: %__MODULE__{
  #           val: integer,
  #           next: ListNode.t() | nil
  #         }
  #   defstruct val: 0, next: nil
  # end

  defmodule Solution do
    @spec add_two_numbers(l1 :: ListNode.t() | nil, l2 :: ListNode.t() | nil) :: ListNode.t() | nil
    def add_two_numbers(l1, l2) do
      {n1, _} = list_to_num(l1)
      {n2, _} = list_to_num(l2)
      num_to_list(n1 + n2)
    end

    def list_to_num(lst) do
      {n, _} =
        lst
        |> Enum.reverse()
        |> Enum.join("")
        |> Integer.parse()

      n
    end

    def num_to_list(n) do
      "#{n}"
      |> String.graphemes()
      |> Enum.reverse()
      |> Enum.map(fn x ->
        {n, _} = Integer.parse(x)
        n
      end)
    end
  end
#+end_src
- When I run the code, it said to me: protocol Enumerable not implemented for %ListNode{}.
- So, how to implement some protocol for a custom struct?
